{"version":3,"file":"static/js/home.e9e79825.chunk.js","mappings":"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","sources":["components/atoms/Skeleton/styles.tsx","components/atoms/Skeleton/Skeleton.tsx","util/api/getRecommendSimpleOrganization.ts","util/hooks/useRecommendSimpleOrganizations.ts","components/molecules/CardOrganization/styles.tsx","components/molecules/CardOrganization/CardOrganization.tsx","components/organisms/RecommendOrganizations/styles.tsx","components/organisms/RecommendOrganizations/RecommendOrganizations.tsx","components/pages/HomePage/styles.tsx","components/pages/HomePage/HomePage.tsx"],"sourcesContent":["import styled, { keyframes } from 'styled-components';\n\nimport type { SkeletonProps, SkeletonSquareProps } from './Skeleton';\n\nconst fadeIn = keyframes`\n  0% {\n    opacity: 0.5;\n  }\n  50% {\n    opacity: 1;\n  }\n  100% {\n    opacity: 0.5;\n  }\n`;\n\nexport const Text = styled.div<Pick<SkeletonProps, 'size' | 'width'>>`\n  width: ${({ width }) => (typeof width === 'string' ? width : `${width}px`)};\n  height: ${({ size = 'paragraph' }) =>\n    ({ title: '32px', subtitle: '23px', paragraph: '24px' }[size])};\n  border-radius: ${({ theme }) => theme.borderRadius}px;\n  background-color: rgb(${({ theme }) => theme.colors.netural300});\n  animation: 2s ${fadeIn} ease-out infinite;\n`;\n\nexport const Square = styled.div<Pick<SkeletonSquareProps, 'size'>>`\n  background-color: red;\n  width: ${({ size }) => (typeof size === 'string' ? size : `${size}px`)};\n  height: ${({ size }) => (typeof size === 'string' ? size : `${size}px`)};\n  border-radius: ${({ theme }) => theme.borderRadius}px;\n  background-color: rgb(${({ theme }) => theme.colors.netural300});\n  animation: 2s ${fadeIn} ease-out infinite;\n`;\n","import React from 'react';\n\nimport * as S from './styles';\n\nexport interface SkeletonProps {\n  className?: string;\n  width: number | string;\n  size?: 'title' | 'subtitle' | 'paragraph';\n}\n\nexport const Skeleton = React.memo(\n  ({ className, width, size = 'paragraph' }: SkeletonProps) => {\n    return <S.Text className={className} width={width} size={size} />;\n  }\n);\n\nexport interface SkeletonSquareProps {\n  className?: string;\n  size: number | string;\n}\n\nexport const SkeletonSquare = React.memo(\n  ({ className, size }: SkeletonSquareProps) => {\n    return <S.Square className={className} size={size} />;\n  }\n);\n","import type { ResponseData, SimpleGithubOrgData } from '../../../types';\nimport { GITHUB_API_ENDPOINT } from '../constants';\n\ntype Params = {\n  nameList: string[];\n};\n\nconst getRecommendSimpleOrganization = async ({ nameList }: Params) => {\n  const { status, message, ...data } = (await fetch(\n    `${GITHUB_API_ENDPOINT}/search/users?q=type:org+in:login+in:name+${encodeURIComponent(\n      nameList.join(' OR ')\n    )}&per_page=${nameList.length}`\n  ).then((r) =>\n    r.json().then((d) => ({ status: r.status, ...d }))\n  )) as ResponseData<{ total_count: number; items: SimpleGithubOrgData[] }>;\n\n  if (status !== 200) {\n    throw new Error(message);\n  }\n\n  return data.items;\n};\n\nexport default getRecommendSimpleOrganization;\n","import { useQuery, UseQueryOptions } from 'react-query';\n\nimport type { SimpleGithubOrgData } from '../../../types';\nimport { simpleOrganizationsKeys } from '../queryKeys';\nimport getRecommendSimpleOrganization from '../api/getRecommendSimpleOrganization';\n\ntype Params = Parameters<typeof getRecommendSimpleOrganization>[0];\n\nconst useRecommendSimpleOrganizations = (\n  params: Params,\n  options?: UseQueryOptions<SimpleGithubOrgData[], Error, SimpleGithubOrgData[]>\n) => {\n  const { nameList } = params;\n\n  return useQuery<SimpleGithubOrgData[], Error, SimpleGithubOrgData[]>(\n    simpleOrganizationsKeys.recommendList(nameList),\n    () => getRecommendSimpleOrganization(params),\n    {\n      retry: false,\n      refetchOnWindowFocus: false,\n      staleTime: 600000, // 10 minutes\n      ...options,\n    }\n  );\n};\n\nexport default useRecommendSimpleOrganizations;\n","import styled from 'styled-components';\nimport { CardOrganizationProps } from './CardOrganization';\n\nexport const Thumbnail = styled.div<Pick<CardOrganizationProps, 'thumbnail'>>`\n  display: inline-flex;\n  flex-shrink: 0;\n  width: 56px;\n  height: 56px;\n  border-radius: ${({ theme }) => theme.borderRadius}px;\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-position: center;\n  background-image: url(${(props) => props.thumbnail});\n`;\n\nexport const Name = styled.div`\n  white-space: nowrap;\n  font-size: ${({ theme }) => theme.fontSize.title};\n  font-weight: 600;\n  line-height: 32px;\n  text-overflow: ellipsis;\n  overflow: hidden;\n`;\n\nexport const Description = styled.div`\n  display: -webkit-box;\n  font-size: ${({ theme }) => theme.fontSize.paragraph};\n  line-height: 24px;\n  -webkit-line-clamp: 2;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  text-overflow: ellipsis;\n  overflow: hidden;\n`;\n\ninterface ContentProps {\n  jusitifyCenter?: React.CSSProperties['justifyContent'];\n}\n\nexport const Content = styled.div<ContentProps>`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: ${({ jusitifyCenter }) => jusitifyCenter};\n  margin-left: 24px;\n  min-width: 0;\n`;\n\nexport const Container = styled.div`\n  display: flex;\n  border-radius: ${({ theme }) => theme.borderRadius}px;\n  overflow: hidden;\n  padding: 24px 16px;\n  transition: background-color 0.3s ease-out;\n\n  :hover {\n    background-color: rgb(${({ theme }) => theme.colors.netural100});\n  }\n`;\n","import React from 'react';\nimport Skeleton, { SkeletonSquare } from '../../atoms/Skeleton';\n\nimport * as S from './styles';\n\nexport interface CardOrganizationProps {\n  className?: string;\n  name?: string;\n  description?: string;\n  thumbnail?: string;\n  onClearValue?: (event: React.SyntheticEvent<HTMLButtonElement>) => void;\n}\n\nexport const CardOrganization = React.memo(\n  ({ className, name, description, thumbnail }: CardOrganizationProps) => {\n    return (\n      <S.Container className={className}>\n        <S.Thumbnail thumbnail={thumbnail} />\n        <S.Content\n          jusitifyCenter={name && description ? 'flex-start' : 'center'}\n        >\n          {name && <S.Name>{name}</S.Name>}\n          {description && <S.Description>{description}</S.Description>}\n        </S.Content>\n      </S.Container>\n    );\n  }\n);\n\nexport interface CardOrganizationSkeletonProps {\n  className?: string;\n}\n\nexport const CardOrganizationSkeleton = React.memo(\n  ({ className }: CardOrganizationSkeletonProps) => {\n    return (\n      <S.Container className={className}>\n        <SkeletonSquare size={96} />\n        <S.Content jusitifyCenter=\"space-between\">\n          <Skeleton width=\"50%\" size=\"title\" />\n          <Skeleton width=\"100%\" />\n          <Skeleton width=\"30%\" />\n        </S.Content>\n      </S.Container>\n    );\n  }\n);\n","import styled from 'styled-components';\n\nimport { device } from '../../../util/media';\n\nexport const Title = styled.div`\n  font-size: ${({ theme }) => theme.fontSize.subtitle};\n  font-weight: 900;\n  margin-bottom: 24px;\n`;\n\nexport const CardGroup = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n\n  > * {\n    text-decoration: none;\n    width: 33%;\n\n    @media ${device.tablet} {\n      width: 50%;\n    }\n\n    @media ${device.mobile} {\n      width: 100%;\n    }\n  }\n`;\n\nexport const Container = styled.div`\n  max-width: 800px;\n  padding: 40px 0;\n  margin: 0 auto;\n`;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport useRecommendSimpleOrganizations from '../../../util/hooks/useRecommendSimpleOrganizations';\nimport CardOrganization, {\n  CardOrganizationSkeleton,\n} from '../../molecules/CardOrganization';\n\nimport * as S from './styles';\n\nconst CardGroup = () => {\n  const {\n    status: fetchRecommendOrgsStatus,\n    data: recommendOrgsData,\n    error: fetchRecommendOrgsError,\n  } = useRecommendSimpleOrganizations({\n    nameList: ['vercel', 'figma', 'mswjs', 'facebook', 'Dcard', 'strapi'],\n  });\n\n  return (\n    <S.CardGroup>\n      {fetchRecommendOrgsStatus === 'idle' ||\n      fetchRecommendOrgsStatus === 'loading' ? (\n        <>\n          {new Array(6).fill(0).map((_, index) => (\n            <CardOrganizationSkeleton key={index} />\n          ))}\n        </>\n      ) : fetchRecommendOrgsStatus === 'error' ? (\n        fetchRecommendOrgsError.message\n      ) : (\n        recommendOrgsData?.map((orgData) => (\n          <Link key={orgData.id} to={`/${orgData.login}`}>\n            <CardOrganization\n              key={orgData.id}\n              name={orgData.login}\n              thumbnail={orgData.avatar_url}\n            />\n          </Link>\n        ))\n      )}\n    </S.CardGroup>\n  );\n};\n\nexport interface RecommendOrganizationsProps {\n  className?: string;\n}\n\nexport const RecommendOrganizations = React.memo(\n  ({ className }: RecommendOrganizationsProps) => {\n    return (\n      <S.Container className={className}>\n        <S.Title>You might be interested</S.Title>\n        <CardGroup />\n      </S.Container>\n    );\n  }\n);\n","import styled from 'styled-components';\n\nimport { device } from '../../../util/media';\n\nimport OrganizationInputSearchComponent from '../../organisms/OrganizationInputSearch';\nimport RecommendOrganizationsComponent from '../../organisms/RecommendOrganizations';\n\nexport const RecommendOrganizations = styled(RecommendOrganizationsComponent)`\n  width: 100%;\n`;\n\nexport const BannerImg = styled.img`\n  width: 100%;\n  max-width: 440px;\n\n  @media ${device.tablet} {\n    max-width: 400px;\n  }\n`;\n\nexport const BannerInput = styled(OrganizationInputSearchComponent)`\n  width: 100%;\n  max-width: 560px;\n`;\n\nexport const BannerContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 40px 0;\n`;\n\nexport const Container = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  width: 100%;\n`;\n","import useMediaQuery from '../../../util/hooks/useMediaQuery';\nimport { device } from '../../../util/media';\n\nimport banner from '../../../assets/images/banner.png';\n\nimport * as S from './styles';\n\nexport interface HomePageProps {\n  className?: string;\n}\n\nexport const HomePage = ({ className }: HomePageProps) => {\n  const isTablet = useMediaQuery(device.tablet);\n\n  return (\n    <S.Container className={className}>\n      <S.BannerContainer>\n        <S.BannerImg src={banner} alt=\"banner\" />\n        {!isTablet && <S.BannerInput />}\n      </S.BannerContainer>\n      <S.RecommendOrganizations />\n    </S.Container>\n  );\n};\n"],"names":["fadeIn","keyframes","Text","styled","width","size","title","subtitle","paragraph","theme","borderRadius","colors","netural300","Square","Skeleton","React","className","SkeletonSquare","getRecommendSimpleOrganization","nameList","fetch","GITHUB_API_ENDPOINT","encodeURIComponent","join","length","then","r","json","d","status","message","data","Error","items","params","options","useQuery","simpleOrganizationsKeys","retry","refetchOnWindowFocus","staleTime","Thumbnail","props","thumbnail","Name","fontSize","Description","Content","jusitifyCenter","Container","netural100","CardOrganization","name","description","CardOrganizationSkeleton","Title","CardGroup","device","useRecommendSimpleOrganizations","fetchRecommendOrgsStatus","recommendOrgsData","fetchRecommendOrgsError","error","Array","fill","map","_","index","orgData","to","login","avatar_url","id","RecommendOrganizations","RecommendOrganizationsComponent","BannerImg","BannerInput","OrganizationInputSearchComponent","BannerContainer","HomePage","isTablet","useMediaQuery","src","banner","alt"],"sourceRoot":""}