{"version":3,"file":"static/js/895.a2b186b7.chunk.js","mappings":"8NAEaA,E,QAAcC,QAAAA,IAAH,qE,SCmBXC,GAAeC,EAAAA,EAAAA,OAC1B,YAU0B,IATxBC,EASuB,EATvBA,WACAC,EAQuB,EARvBA,UACAC,EAOuB,EAPvBA,KAOuB,IALvBC,iBAAAA,OAKuB,aAJvBC,YAAAA,OAIuB,aAHvBC,mBAAAA,OAGuB,SAFvBC,EAEuB,EAFvBA,cAEuB,IADvBC,YAAAA,OACuB,MADT,aACS,EACjBC,EAAYN,EAAKO,OACjBC,EAAUR,EAAKO,QAAU,EACzBE,EAAmBN,GAAsBK,EACzCE,EAAaC,EAAAA,EAAmB,GAChCC,EAAwBC,KAAKC,MAAMhB,EAAaY,GAChDK,EACHb,IAAgBD,GAAqBQ,EAClCH,EAAYM,EACZN,EAGAU,GAAWC,EAAAA,EAAAA,QAAoC,MAE/CC,GAAiBC,EAAAA,EAAAA,cACrB,SAACC,GACKnB,GAAoBE,IAIpBa,EAASK,SACXL,EAASK,QAAQC,aAEnBN,EAASK,QAAU,IAAIE,sBAAqB,SAACC,GAEzCA,EAAO,GAAGC,gBACVvB,GACyB,oBAAlBE,GAEPA,OAIAgB,GACFJ,EAASK,QAAQK,QAAQN,MAG7B,CAACnB,EAAkBE,EAAoBD,EAAaE,IAGhDuB,GAA8C9B,EAAAA,EAAAA,OAClD,YAAuC,IAApC+B,EAAmC,EAAnCA,YAAaC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MAClBC,EAAQC,EAAAA,EAAoBH,EAAWD,EACvCK,EACJF,EAAQzB,OAAY4B,EAAYlC,EAAK+B,GAEvC,OACE,SAAC,EAAD,CACEI,IAAK,SAACf,GACAW,IAAUzB,EAAY,GACxBY,EAAeE,IAGnBU,MAAOA,EANT,UAQIG,GAAQ9B,GACR,SAACiC,EAAA,EAAD,IACGH,GACH,SAACG,EAAA,EAAD,CACEC,KAAMJ,EAAKI,KACXC,YAAaL,EAAKK,YAClBC,UAAWN,EAAKM,UAChBC,SAAUP,EAAKO,SACfC,MAAOR,EAAKQ,MACZC,QAAS,kBAAMrC,EAAY4B,EAAKI,SAPxB,SAalBM,EAAAA,IAGF,OACE,SAAC,IAAD,CAAqBC,QAAM,EAA3B,SACG,gBAAGT,EAAH,EAAGA,IAAKU,EAAR,EAAQA,SAAUf,EAAlB,EAAkBA,MAAOgB,EAAzB,EAAyBA,SAAzB,OACC,SAAC,KAAD,CACEX,IAAKA,EACLU,SAAUA,EACVf,MAAOA,EACPiB,YAAaf,EAAAA,EACbgB,YAAajD,EAAYiC,EAAAA,EACzBiB,SAAUpC,KAAKqC,KAAKnC,EAAkBiB,EAAAA,GACtCmB,UAAWzC,EACX0C,OAAQtD,EACRuD,MAAOtD,EACP+C,SAAUA,EAVZ,SAYGnB","sources":["components/molecules/RepoListGrid/styles.tsx","components/molecules/RepoListGrid/RepoListGrid.tsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ItemWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n","import { useCallback, useRef, memo } from 'react';\nimport { FixedSizeGrid, FixedSizeGridProps, areEqual } from 'react-window';\nimport { ReactWindowScroller } from 'react-window-scroller';\n\nimport { CARD_REPO_HEIGHT, GRID_COLUMN_COUNT } from '../../../util/constants';\n\nimport CardRepo, { CardRepoSkeleton, CardRepoProps } from '../CardRepo';\n\nimport * as S from './styles';\n\nexport interface RepoListGridProps {\n  listHeight: number;\n  listWidth: number;\n  data: CardRepoProps[];\n  disableFetchMore?: boolean;\n  hasNextPage?: boolean;\n  isFetchingNextPage?: boolean;\n  fetchNextPage?: () => void;\n  onClickRepo?: (repoName: string) => void;\n}\n\nexport const RepoListGrid = memo(\n  ({\n    listHeight,\n    listWidth,\n    data,\n    // 如果發生 API rate limit 就轉為手動觸發 fetchNextPage\n    disableFetchMore = false,\n    hasNextPage = false,\n    isFetchingNextPage = false,\n    fetchNextPage,\n    onClickRepo = () => undefined,\n  }: RepoListGridProps) => {\n    const itemCount = data.length;\n    const isEmpty = data.length <= 0;\n    const isInitialLoading = isFetchingNextPage && isEmpty;\n    const itemHeight = CARD_REPO_HEIGHT + 24;\n    const skeletonCountInScreen = Math.round(listHeight / itemHeight);\n    const renderItemCount =\n      (hasNextPage && !disableFetchMore) || isInitialLoading\n        ? itemCount + skeletonCountInScreen\n        : itemCount;\n\n    // handle infinite scroll\n    const observer = useRef<IntersectionObserver | null>(null);\n    // will be call every single time when component rerender\n    const lastElementRef = useCallback(\n      (node: HTMLDivElement | null) => {\n        if (disableFetchMore || isFetchingNextPage) {\n          return;\n        }\n        // disconnect observer from previous element before reconnet\n        if (observer.current) {\n          observer.current.disconnect();\n        }\n        observer.current = new IntersectionObserver((enties) => {\n          if (\n            enties[0].isIntersecting &&\n            hasNextPage &&\n            typeof fetchNextPage === 'function'\n          ) {\n            fetchNextPage();\n          }\n        });\n\n        if (node) {\n          observer.current.observe(node);\n        }\n      },\n      [disableFetchMore, isFetchingNextPage, hasNextPage, fetchNextPage]\n    );\n\n    const renderRepos: FixedSizeGridProps['children'] = memo(\n      ({ columnIndex, rowIndex, style }) => {\n        const index = GRID_COLUMN_COUNT * rowIndex + columnIndex;\n        const repo: CardRepoProps | undefined =\n          index > itemCount ? undefined : data[index];\n\n        return (\n          <S.ItemWrapper\n            ref={(node) => {\n              if (index === itemCount - 1) {\n                lastElementRef(node);\n              }\n            }}\n            style={style}\n          >\n            {!repo && isFetchingNextPage ? (\n              <CardRepoSkeleton />\n            ) : !repo ? null : (\n              <CardRepo\n                name={repo.name}\n                description={repo.description}\n                githubUrl={repo.githubUrl}\n                language={repo.language}\n                stars={repo.stars}\n                onClick={() => onClickRepo(repo.name as string)}\n              />\n            )}\n          </S.ItemWrapper>\n        );\n      },\n      areEqual\n    );\n\n    return (\n      <ReactWindowScroller isGrid>\n        {({ ref, outerRef, style, onScroll }) => (\n          <FixedSizeGrid\n            ref={ref}\n            outerRef={outerRef}\n            style={style}\n            columnCount={GRID_COLUMN_COUNT}\n            columnWidth={listWidth / GRID_COLUMN_COUNT}\n            rowCount={Math.ceil(renderItemCount / GRID_COLUMN_COUNT)}\n            rowHeight={itemHeight}\n            height={listHeight}\n            width={listWidth}\n            onScroll={onScroll}\n          >\n            {renderRepos}\n          </FixedSizeGrid>\n        )}\n      </ReactWindowScroller>\n    );\n  }\n);\n"],"names":["ItemWrapper","styled","RepoListGrid","memo","listHeight","listWidth","data","disableFetchMore","hasNextPage","isFetchingNextPage","fetchNextPage","onClickRepo","itemCount","length","isEmpty","isInitialLoading","itemHeight","CARD_REPO_HEIGHT","skeletonCountInScreen","Math","round","renderItemCount","observer","useRef","lastElementRef","useCallback","node","current","disconnect","IntersectionObserver","enties","isIntersecting","observe","renderRepos","columnIndex","rowIndex","style","index","GRID_COLUMN_COUNT","repo","undefined","ref","CardRepo","name","description","githubUrl","language","stars","onClick","areEqual","isGrid","outerRef","onScroll","columnCount","columnWidth","rowCount","ceil","rowHeight","height","width"],"sourceRoot":""}